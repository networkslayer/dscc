name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # ----------------------------------
  # 🧪 Pull Request Tests
  # ----------------------------------
  pr-tests:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      GITHUB_REPO: github.com/networkslayer/dscc.git

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-root

      - name: Validate detection index
        run: poetry run python scripts/validate_index_yaml.py

      - name: Run CLI test
        run: poetry run dscc list_apps

      - name: Build detections.json
        run: python frontend/build.py

      - name: Start Spark API container
        run: docker compose -f docker-compose.yml up -d spark-api

      - name: Wait for Spark API
        run: |
          echo "⏳ Waiting for Spark API to start..."
          for i in {1..10}; do
            if curl -s -f http://localhost:9000; then
              echo "✅ Spark API is ready!"
              break
            fi
            sleep 3
          done

      - name: Install jq (JSON parser)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Call Spark API to run all tests (authenticated)
        env:
          SPARK_API_USER: ${{ secrets.SPARK_API_USER }}
          SPARK_API_PASS: ${{ secrets.SPARK_API_PASS }}
          SPARK_API_HOST: http://localhost:9000
        run: |
          echo "🔐 Requesting access token..."
          RESPONSE=$(curl -s -X POST -d "username=$SPARK_API_USER&password=$SPARK_API_PASS" $SPARK_API_HOST/token)
          echo "🔐 Token response: $RESPONSE"
          TOKEN=$(echo $RESPONSE | jq -r .access_token)

          if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            echo "❌ Failed to extract token. Aborting."
            exit 1
          fi

          echo "✅ Got token: $TOKEN"
          echo "🚀 Running detection tests..."
          curl -H "Authorization: Bearer $TOKEN" -X POST $SPARK_API_HOST/run-all

  # ----------------------------------
  # 🚀 Post-Merge Production Step
  # ----------------------------------
  post-merge:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-root

      - name: Rebuild detections.json
        run: |
          echo "🛠️ Rebuilding detections index..."
          python frontend/build.py

      - name: Detect changes to detections.json
        id: changes
        run: |
          git config --global user.name "dscc-bot"
          git config --global user.email "dscc@app"
          git add frontend/static/detections.json
          git diff --cached --quiet || echo "changed=true" >> $GITHUB_OUTPUT

      - name: Commit and push updated detections.json
        if: steps.changes.outputs.changed == 'true'
        run: |
          git commit -m "🤖 Update detections.json after merge"
          git push origin main

      - name: Build Spark container
        run: docker compose -f docker-compose.yml build spark-api
